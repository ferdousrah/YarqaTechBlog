/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    categories: Category;
    tags: Tag;
    posts: Post;
    comments: Comment;
    bookmarks: Bookmark;
    'search-queries': SearchQuery;
    'post-views': PostView;
    'reading-progress': ReadingProgress;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    comments: CommentsSelect<false> | CommentsSelect<true>;
    bookmarks: BookmarksSelect<false> | BookmarksSelect<true>;
    'search-queries': SearchQueriesSelect<false> | SearchQueriesSelect<true>;
    'post-views': PostViewsSelect<false> | PostViewsSelect<true>;
    'reading-progress': ReadingProgressSelect<false> | ReadingProgressSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name: string;
  role: 'admin' | 'editor' | 'advertiser' | 'user';
  avatar?: (number | null) | Media;
  bio?: string | null;
  socialLinks?: {
    twitter?: string | null;
    linkedin?: string | null;
    github?: string | null;
    website?: string | null;
  };
  preferences?: {
    emailNotifications?: boolean | null;
    newsletter?: boolean | null;
    theme?: ('light' | 'dark' | 'system') | null;
  };
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  /**
   * Alternative text for accessibility
   */
  alt: string;
  caption?: string | null;
  uploadedBy?: (number | null) | User;
  focalPoint?: {
    x?: number | null;
    y?: number | null;
  };
  /**
   * Photo credit or attribution
   */
  credit?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    desktop?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  name: string;
  slug?: string | null;
  description?: string | null;
  /**
   * Select parent to create subcategory
   */
  parent?: (number | null) | Category;
  /**
   * Hex color (e.g., #FF5733)
   */
  color?: string | null;
  icon?:
    | ('code' | 'mobile' | 'cloud' | 'database' | 'security' | 'ai' | 'design' | 'business' | 'tutorial' | 'news')
    | null;
  image?: (number | null) | Media;
  featured?: boolean | null;
  order?: number | null;
  postCount?: number | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: number;
  name: string;
  slug?: string | null;
  description?: string | null;
  color?: string | null;
  usageCount?: number | null;
  featured?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage blog posts with rich content
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  /**
   * The main title of your post (max 200 characters)
   */
  title: string;
  /**
   * Auto-generated from title
   */
  slug?: string | null;
  /**
   * Brief summary shown in post listings (max 300 characters)
   */
  excerpt: string;
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Main image displayed with the post
   */
  featuredImage: number | Media;
  /**
   * Additional images for the post
   */
  gallery?:
    | {
        image: number | Media;
        caption?: string | null;
        id?: string | null;
      }[]
    | null;
  author: number | User;
  category: number | Category;
  tags?: (number | Tag)[] | null;
  status: 'draft' | 'published' | 'scheduled' | 'archived';
  /**
   * When to publish this post
   */
  publishedAt?: string | null;
  /**
   * Display as featured on homepage
   */
  featured?: boolean | null;
  /**
   * Mark as trending
   */
  trending?: boolean | null;
  /**
   * Reading time in minutes
   */
  readTime?: number | null;
  views?: number | null;
  likes?: number | null;
  shares?: number | null;
  /**
   * Social media sharing settings
   */
  socialSharing?: {
    enableTwitter?: boolean | null;
    enableLinkedIn?: boolean | null;
    enableFacebook?: boolean | null;
    enableWhatsApp?: boolean | null;
    customShareText?: string | null;
  };
  videoEmbed?: {
    hasVideo?: boolean | null;
    videoUrl?: string | null;
    videoPosition?: ('top' | 'bottom' | 'inline') | null;
  };
  /**
   * Select related posts
   */
  relatedPosts?: (number | Post)[] | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    metaImage?: (number | null) | Media;
    keywords?: string | null;
    canonicalUrl?: string | null;
    noIndex?: boolean | null;
  };
  commentsSettings?: {
    enableComments?: boolean | null;
    commentsCount?: number | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments".
 */
export interface Comment {
  id: number;
  content: string;
  post: number | Post;
  author: number | User;
  /**
   * Reply to another comment
   */
  parentComment?: (number | null) | Comment;
  status: 'pending' | 'approved' | 'spam' | 'deleted';
  likes?: number | null;
  isEdited?: boolean | null;
  editedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * User bookmarked posts
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bookmarks".
 */
export interface Bookmark {
  id: number;
  user: number | User;
  post: number | Post;
  /**
   * Personal note about this bookmark
   */
  note?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Track user search queries
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search-queries".
 */
export interface SearchQuery {
  id: number;
  query: string;
  resultsCount?: number | null;
  user?: (number | null) | User;
  ipAddress?: string | null;
  userAgent?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Track post views for analytics
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "post-views".
 */
export interface PostView {
  id: number;
  post: number | Post;
  user?: (number | null) | User;
  ipAddress?: string | null;
  userAgent?: string | null;
  referrer?: string | null;
  /**
   * Time spent on page in seconds
   */
  duration?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reading-progress".
 */
export interface ReadingProgress {
  id: number;
  user: number | User;
  post: number | Post;
  /**
   * Reading progress percentage (0-100)
   */
  progress: number;
  completed?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'tags';
        value: number | Tag;
      } | null)
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'comments';
        value: number | Comment;
      } | null)
    | ({
        relationTo: 'bookmarks';
        value: number | Bookmark;
      } | null)
    | ({
        relationTo: 'search-queries';
        value: number | SearchQuery;
      } | null)
    | ({
        relationTo: 'post-views';
        value: number | PostView;
      } | null)
    | ({
        relationTo: 'reading-progress';
        value: number | ReadingProgress;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  avatar?: T;
  bio?: T;
  socialLinks?:
    | T
    | {
        twitter?: T;
        linkedin?: T;
        github?: T;
        website?: T;
      };
  preferences?:
    | T
    | {
        emailNotifications?: T;
        newsletter?: T;
        theme?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  uploadedBy?: T;
  focalPoint?:
    | T
    | {
        x?: T;
        y?: T;
      };
  credit?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        desktop?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  parent?: T;
  color?: T;
  icon?: T;
  image?: T;
  featured?: T;
  order?: T;
  postCount?: T;
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  color?: T;
  usageCount?: T;
  featured?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  excerpt?: T;
  content?: T;
  featuredImage?: T;
  gallery?:
    | T
    | {
        image?: T;
        caption?: T;
        id?: T;
      };
  author?: T;
  category?: T;
  tags?: T;
  status?: T;
  publishedAt?: T;
  featured?: T;
  trending?: T;
  readTime?: T;
  views?: T;
  likes?: T;
  shares?: T;
  socialSharing?:
    | T
    | {
        enableTwitter?: T;
        enableLinkedIn?: T;
        enableFacebook?: T;
        enableWhatsApp?: T;
        customShareText?: T;
      };
  videoEmbed?:
    | T
    | {
        hasVideo?: T;
        videoUrl?: T;
        videoPosition?: T;
      };
  relatedPosts?: T;
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        metaImage?: T;
        keywords?: T;
        canonicalUrl?: T;
        noIndex?: T;
      };
  commentsSettings?:
    | T
    | {
        enableComments?: T;
        commentsCount?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments_select".
 */
export interface CommentsSelect<T extends boolean = true> {
  content?: T;
  post?: T;
  author?: T;
  parentComment?: T;
  status?: T;
  likes?: T;
  isEdited?: T;
  editedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bookmarks_select".
 */
export interface BookmarksSelect<T extends boolean = true> {
  user?: T;
  post?: T;
  note?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search-queries_select".
 */
export interface SearchQueriesSelect<T extends boolean = true> {
  query?: T;
  resultsCount?: T;
  user?: T;
  ipAddress?: T;
  userAgent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "post-views_select".
 */
export interface PostViewsSelect<T extends boolean = true> {
  post?: T;
  user?: T;
  ipAddress?: T;
  userAgent?: T;
  referrer?: T;
  duration?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reading-progress_select".
 */
export interface ReadingProgressSelect<T extends boolean = true> {
  user?: T;
  post?: T;
  progress?: T;
  completed?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}